# %%
# Import packages

import numpy as np

import sys

import paths

import variancematrix as vm

# %%
# Determine which specification
task_id = int(sys.argv[1])

# Determine whether computing standard errors
compute_std_errs = np.load(f"{paths.arrays_path}compute_std_errs.npy")[0]
eps_grad = np.load(f"{paths.arrays_path}eps_grad.npy")
G_n = np.load(f"{paths.arrays_path}Gn_{task_id}.npy")
What = np.load(f"{paths.arrays_path}What_{task_id}.npy")
Sigma = vm.V(G_n, What, np.linalg.inv(What))
num_obs = float(np.load(f"{paths.arrays_path}num_obs.npy")[0])

# Number of firms considered
num_firms_array = np.load(f"{paths.arrays_path}num_firms_array.npy")
num_firms_array_extend = np.load(f"{paths.arrays_path}num_firms_array_extend.npy")

# %%
# Load arrays
compressed_arrs = np.load(f"{paths.arrays_path}all_arrays_{task_id}.npz")
p_stars, R_stars, num_stations_stars, num_stations_per_firm_stars, q_stars, cs_by_type, cs, ps, ts, ccs, ccs_per_bw, avg_path_losses, avg_SINR, full_elasts, partial_elasts, p_stars_allfixed, R_stars_allfixed, num_stations_stars_allfixed, num_stations_per_firm_stars_allfixed, q_stars_allfixed, cs_by_type_allfixed, cs_allfixed, ps_allfixed, ts_allfixed, ccs_allfixed, ccs_per_bw_allfixed, avg_path_losses_allfixed, avg_SINR_allfixed, partial_Pif_partial_bf_allfixed, partial_Piotherf_partial_bf_allfixed, partial_diffPif_partial_bf_allfixed, partial_Pif_partial_b_allfixed, partial_CS_partial_b_allfixed, partial_Pif_partial_bf_allbw, partial_Piotherf_partial_bf_allbw, partial_diffPif_partial_bf_allbw, partial_Pif_partial_b_allbw, partial_CS_partial_b_allbw, c_u, c_R, p_stars_shortrun, R_stars_shortrun, num_stations_stars_shortrun, num_stations_per_firm_stars_shortrun, q_stars_shortrun, cs_by_type_shortrun, cs_shortrun, ps_shortrun, ts_shortrun, ccs_shortrun, ccs_per_bw_shortrun, avg_path_losses_shortrun, p_stars_free_allfixed, R_stars_free_allfixed, num_stations_stars_free_allfixed, num_stations_per_firm_stars_free_allfixed, q_stars_free_allfixed, cs_by_type_free_allfixed, cs_free_allfixed, ps_free_allfixed, ts_free_allfixed, ccs_free_allfixed, ccs_per_bw_free_allfixed, avg_path_losses_free_allfixed, p_stars_free_allbw, R_stars_free_allbw, num_stations_stars_free_allbw, num_stations_per_firm_stars_free_allbw, q_stars_free_allbw, cs_by_type_free_allbw, cs_free_allbw, ps_free_allbw, ts_free_allbw, ccs_free_allbw, ccs_per_bw_free_allbw, avg_path_losses_free_allbw, p_stars_dens, R_stars_dens, num_stations_stars_dens, num_stations_per_firm_stars_dens, q_stars_dens, cs_dens, cs_by_type_dens, ps_dens, ts_dens, ccs_dens, ccs_per_bw_dens, avg_path_losses_dens, avg_SINR_dens, p_stars_bw, R_stars_bw, num_stations_stars_bw, num_stations_per_firm_stars_bw, q_stars_bw, cs_bw, cs_by_type_bw, ps_bw, ts_bw, ccs_bw, ccs_per_bw_bw, avg_path_losses_bw, avg_SINR_bw, p_stars_dens_1p, R_stars_dens_1p, num_stations_stars_dens_1p, num_stations_per_firm_stars_dens_1p, q_stars_dens_1p, cs_dens_1p, cs_by_type_dens_1p, ps_dens_1p, ts_dens_1p, ccs_dens_1p, ccs_per_bw_dens_1p, avg_path_losses_dens_1p, avg_SINR_dens_1p, p_stars_asymmetric_allbw, R_stars_asymmetric_allbw, num_stations_stars_asymmetric_allbw, num_stations_per_firm_stars_asymmetric_allbw, q_stars_asymmetric_allbw, cs_asymmetric_allbw, cs_by_type_asymmetric_allbw, ps_asymmetric_allbw, ts_asymmetric_allbw, ccs_asymmetric_allbw, ccs_per_bw_asymmetric_allbw, avg_path_losses_asymmetric_allbw, avg_SINR_asymmetric_allbw, p_stars_shortrunall, R_stars_shortrunall, num_stations_stars_shortrunall, num_stations_per_firm_stars_shortrunall, q_stars_shortrunall, cs_shortrunall, cs_by_type_shortrunall, ps_shortrunall, ts_shortrunall, ccs_shortrunall, ccs_per_bw_shortrunall, avg_path_losses_shortrunall, p_stars_longrunall, R_stars_longrunall, num_stations_stars_longrunall, num_stations_per_firm_stars_longrunall, q_stars_longrunall, cs_longrunall, cs_by_type_longrunall, ps_longrunall, ts_longrunall, ccs_longrunall, ccs_per_bw_longrunall, avg_path_losses_longrunall, successful_extend, successful_extend_allfixed, successful_bw_deriv_allfixed, successful_bw_deriv_allbw, successful_shortrun, successful_free_allfixed, successful_free_allbw, successful_dens, successful_bw, successful_dens_1p, successful_asymmetric_allbw, successful_shortrunall, successful_longrunall, per_user_costs = compressed_arrs['arr_0'], compressed_arrs['arr_1'], compressed_arrs['arr_2'], compressed_arrs['arr_3'], compressed_arrs['arr_4'], compressed_arrs['arr_5'], compressed_arrs['arr_6'], compressed_arrs['arr_7'], compressed_arrs['arr_8'], compressed_arrs['arr_9'], compressed_arrs['arr_10'], compressed_arrs['arr_11'], compressed_arrs['arr_12'], compressed_arrs['arr_13'], compressed_arrs['arr_14'], compressed_arrs['arr_15'], compressed_arrs['arr_16'], compressed_arrs['arr_17'], compressed_arrs['arr_18'], compressed_arrs['arr_19'], compressed_arrs['arr_20'], compressed_arrs['arr_21'], compressed_arrs['arr_22'], compressed_arrs['arr_23'], compressed_arrs['arr_24'], compressed_arrs['arr_25'], compressed_arrs['arr_26'], compressed_arrs['arr_27'], compressed_arrs['arr_28'], compressed_arrs['arr_29'], compressed_arrs['arr_30'], compressed_arrs['arr_31'], compressed_arrs['arr_32'], compressed_arrs['arr_33'], compressed_arrs['arr_34'], compressed_arrs['arr_35'], compressed_arrs['arr_36'], compressed_arrs['arr_37'], compressed_arrs['arr_38'], compressed_arrs['arr_39'], compressed_arrs['arr_40'], compressed_arrs['arr_41'], compressed_arrs['arr_42'], compressed_arrs['arr_43'], compressed_arrs['arr_44'], compressed_arrs['arr_45'], compressed_arrs['arr_46'], compressed_arrs['arr_47'], compressed_arrs['arr_48'], compressed_arrs['arr_49'], compressed_arrs['arr_50'], compressed_arrs['arr_51'], compressed_arrs['arr_52'], compressed_arrs['arr_53'], compressed_arrs['arr_54'], compressed_arrs['arr_55'], compressed_arrs['arr_56'], compressed_arrs['arr_57'], compressed_arrs['arr_58'], compressed_arrs['arr_59'], compressed_arrs['arr_60'], compressed_arrs['arr_61'], compressed_arrs['arr_62'], compressed_arrs['arr_63'], compressed_arrs['arr_64'], compressed_arrs['arr_65'], compressed_arrs['arr_66'], compressed_arrs['arr_67'], compressed_arrs['arr_68'], compressed_arrs['arr_69'], compressed_arrs['arr_70'], compressed_arrs['arr_71'], compressed_arrs['arr_72'], compressed_arrs['arr_73'], compressed_arrs['arr_74'], compressed_arrs['arr_75'], compressed_arrs['arr_76'], compressed_arrs['arr_77'], compressed_arrs['arr_78'], compressed_arrs['arr_79'], compressed_arrs['arr_80'], compressed_arrs['arr_81'], compressed_arrs['arr_82'], compressed_arrs['arr_83'], compressed_arrs['arr_84'], compressed_arrs['arr_85'], compressed_arrs['arr_86'], compressed_arrs['arr_87'], compressed_arrs['arr_88'], compressed_arrs['arr_89'], compressed_arrs['arr_90'], compressed_arrs['arr_91'], compressed_arrs['arr_92'], compressed_arrs['arr_93'], compressed_arrs['arr_94'], compressed_arrs['arr_95'], compressed_arrs['arr_96'], compressed_arrs['arr_97'], compressed_arrs['arr_98'], compressed_arrs['arr_99'], compressed_arrs['arr_100'], compressed_arrs['arr_101'], compressed_arrs['arr_102'], compressed_arrs['arr_103'], compressed_arrs['arr_104'], compressed_arrs['arr_105'], compressed_arrs['arr_106'], compressed_arrs['arr_107'], compressed_arrs['arr_108'], compressed_arrs['arr_109'], compressed_arrs['arr_110'], compressed_arrs['arr_111'], compressed_arrs['arr_112'], compressed_arrs['arr_113'], compressed_arrs['arr_114'], compressed_arrs['arr_115'], compressed_arrs['arr_116'], compressed_arrs['arr_117'], compressed_arrs['arr_118'], compressed_arrs['arr_119'], compressed_arrs['arr_120'], compressed_arrs['arr_121'], compressed_arrs['arr_122'], compressed_arrs['arr_123'], compressed_arrs['arr_124'], compressed_arrs['arr_125'], compressed_arrs['arr_126'], compressed_arrs['arr_127'], compressed_arrs['arr_128'], compressed_arrs['arr_129'], compressed_arrs['arr_130'], compressed_arrs['arr_131'], compressed_arrs['arr_132'], compressed_arrs['arr_133'], compressed_arrs['arr_134'], compressed_arrs['arr_135'], compressed_arrs['arr_136'], compressed_arrs['arr_137'], compressed_arrs['arr_138'], compressed_arrs['arr_139'], compressed_arrs['arr_140'], compressed_arrs['arr_141'], compressed_arrs['arr_142'], compressed_arrs['arr_143'], compressed_arrs['arr_144'], compressed_arrs['arr_145'], compressed_arrs['arr_146'], compressed_arrs['arr_147'], compressed_arrs['arr_148'], compressed_arrs['arr_149'], compressed_arrs['arr_150'], compressed_arrs['arr_151'], compressed_arrs['arr_152'], compressed_arrs['arr_153'], compressed_arrs['arr_154'], compressed_arrs['arr_155'], compressed_arrs['arr_156'], compressed_arrs['arr_157'], compressed_arrs['arr_158'], compressed_arrs['arr_159'], compressed_arrs['arr_160'], compressed_arrs['arr_161'], compressed_arrs['arr_162'], compressed_arrs['arr_163'], compressed_arrs['arr_164'], compressed_arrs['arr_165']

# %%
# Determine point estimates and standard errors

def asym_distribution(var_array, success_array, override_hBnan=False):
    """Determine the point estimate and standard errors given demand parameter using the Delta Method."""
    
    # Copy arrays
    var = np.copy(var_array)
    success = np.copy(success_array)
    
    # Reshape if var and success if success has more than two dimensions (b/c code below written for two dimensions)
    var_shape = var.shape
    success_shape = success.shape
    reshape_necessary = success.ndim > 2
    if reshape_necessary:
        success_combined_2nd_axis = np.prod(np.array(list(success_shape))[1:])
        success_reshape = (success_shape[0], success_combined_2nd_axis)
        var_reshape = tuple(list(success_reshape) + list(var_shape)[success.ndim:])
        var = np.reshape(var, var_reshape)
        success = np.reshape(success, success_reshape)
        
    # if 0 didn't work, just use one of the deviations, they're going to be approximately equal
    for j in range(var.shape[1]):
        if not success[0,j]:
            j_successful = np.where(success[:,j])[0]
            if j_successful.shape[0] > 0:
                idx_use = j_successful[0]
                var[0,...] = var[idx_use,...]
                success[0,j] = success[idx_use,j]
                print(f"index 0 of variable entry {j} not successful, therefore using index {idx_use}, which was", flush=True)
    
    # Determine the point estimate
    hB = var[0,...]
    
    # Compute standard errors
    if compute_std_errs:
        # Determine the gradient
        theta_size = int((var.shape[0] - 1) / 2)
        grad_hB = np.zeros(tuple([theta_size] + list(var.shape[1:])))
        for i in range(theta_size):
            for j in range(var.shape[1]):
                # Determine if there are any "bad" simulations (sometimes we get a crazy value, esp. for monopoly, but calc was "successful" - drop these)
                max_prop = 5.0 # max difference between the two that results in both being "accepted"
                if np.any(np.abs(var[1 + i,j,...] - var[0,j,...]) > max_prop * np.abs(var[1 + theta_size + i,j,...] - var[0,j])):
                    success[1 + i,j] = False
                if np.any(np.abs(var[1 + theta_size + i,j,...] - var[0,j]) > max_prop * np.abs(var[1 + i,j,...] - var[0,j,...])):
                    success[1 + theta_size + i,j] = False
                
                # Construct gradients
                if success[1 + i,j] and success[1 + theta_size + i,j]: # if both sides were successful
                    grad_hB[i,j,...] = (var[1 + i,j,...] - var[1 + theta_size + i,j,...]) / (2. * eps_grad)
                elif success[1 + i,j] and success[0,j]: # elif upper side and point estimate were successful
                    grad_hB[i,j,...] = (var[1 + i,j,...] - var[0,j,...]) / eps_grad
                elif success[1 + theta_size + i,j] and success[0,j]: # elif lower side and point estimate were successful
                    grad_hB[i,j,...] = (var[0,j,...] - var[1 + theta_size + i,j,...]) / eps_grad
                elif success[0,j]: # elif point estimate success but perturbations not
                    grad_hB[i,j,...] = np.nan
                else: # o/w nothing was successful
                    grad_hB[i,j,...] = np.nan
                    if override_hBnan and np.any(success[:,j]): # if some perturbations were successful and we're allowed to use perturbation values for point estimate (works if perturbations small)
                        i_acceptable = np.where(successful_dens[:,0,1])[0]
                        i_use = i_acceptable[1] if i_acceptable.shape[0] > 1 else i_acceptable[0]
                        hB[j,...] = var[i_use,j,...]
                    else:
                        hB[j,...] = np.nan
                    
        # Reshape back if necessary
        if reshape_necessary:
            grad_hB = np.reshape(grad_hB, tuple([theta_size] + list(var_shape)[1:]))
            hB = np.reshape(hB, tuple(list(var_shape)[1:]))

        # Calculate (approximate) standard errors
        grad_hB = np.moveaxis(grad_hB, 0, -1) # move the gradient axis to the end for matrix operations
        hB_normal_asymvar = (grad_hB[...,np.newaxis,:] @ Sigma @ grad_hB[...,np.newaxis])[...,0,0] # multivariate Delta Method
        hB_se = np.sqrt(hB_normal_asymvar / num_obs) # determine the standard errors

        return hB, hB_se
    
    else:
        return hB, np.zeros(hB.shape)

successful = successful_extend[:,np.isin(num_firms_array_extend, num_firms_array)]
p_stars, p_stars_se = asym_distribution(p_stars, successful)
R_stars, R_stars_se = asym_distribution(R_stars, successful)
num_stations_stars, num_stations_stars_se = asym_distribution(num_stations_stars, successful)
num_stations_per_firm_stars, num_stations_per_firm_stars_se = asym_distribution(num_stations_per_firm_stars, successful)
q_stars, q_stars_se = asym_distribution(q_stars, successful)
cs_by_type, cs_by_type_se = asym_distribution(cs_by_type, successful_extend)
cs, cs_se = asym_distribution(cs, successful_extend)
ps, ps_se = asym_distribution(ps, successful_extend)
ts, ts_se = asym_distribution(ts, successful_extend)
ccs, ccs_se = asym_distribution(ccs, successful)
ccs_per_bw, ccs_per_bw_se = asym_distribution(ccs_per_bw, successful)
avg_path_losses, avg_path_losses_se = asym_distribution(avg_path_losses, successful)
avg_SINR, avg_SINR_se = asym_distribution(avg_SINR, successful)
successful_allfixed = successful_extend_allfixed[:,np.isin(num_firms_array_extend, num_firms_array)]
p_stars_allfixed, p_stars_allfixed_se = asym_distribution(p_stars_allfixed, successful_allfixed)
R_stars_allfixed, R_stars_allfixed_se = asym_distribution(R_stars_allfixed, successful_allfixed)
num_stations_stars_allfixed, num_stations_stars_allfixed_se = asym_distribution(num_stations_stars_allfixed, successful_allfixed)
num_stations_per_firm_stars_allfixed, num_stations_per_firm_stars_allfixed_se = asym_distribution(num_stations_per_firm_stars_allfixed, successful_allfixed)
q_stars_allfixed, q_stars_allfixed_se = asym_distribution(q_stars_allfixed, successful_allfixed)
cs_by_type_allfixed, cs_by_type_allfixed_se = asym_distribution(cs_by_type_allfixed, successful_extend_allfixed)
cs_allfixed, cs_allfixed_se = asym_distribution(cs_allfixed, successful_extend_allfixed)
ps_allfixed, ps_allfixed_se = asym_distribution(ps_allfixed, successful_extend_allfixed)
ts_allfixed, ts_allfixed_se = asym_distribution(ts_allfixed, successful_extend_allfixed)
ccs_allfixed, ccs_allfixed_se = asym_distribution(ccs_allfixed, successful_allfixed)
ccs_per_bw_allfixed, ccs_per_bw_allfixed_se = asym_distribution(ccs_per_bw_allfixed, successful_allfixed)
avg_path_losses_allfixed, avg_path_losses_allfixed_se = asym_distribution(avg_path_losses_allfixed, successful_allfixed)
avg_SINR_allfixed, avg_SINR_allfixed_se = asym_distribution(avg_SINR_allfixed, successful_allfixed)
full_elasts, full_elasts_se = asym_distribution(full_elasts, successful)
partial_elasts, partial_elasts_se = asym_distribution(partial_elasts, successful)
partial_Pif_partial_bf_allfixed, partial_Pif_partial_bf_allfixed_se = asym_distribution(partial_Pif_partial_bf_allfixed, successful_bw_deriv_allfixed)
partial_Piotherf_partial_bf_allfixed, partial_Piotherf_partial_bf_allfixed_se = asym_distribution(partial_Piotherf_partial_bf_allfixed, successful_bw_deriv_allfixed)
partial_diffPif_partial_bf_allfixed, partial_diffPif_partial_bf_allfixed_se = asym_distribution(partial_diffPif_partial_bf_allfixed, successful_bw_deriv_allfixed)
partial_Pif_partial_b_allfixed, partial_Pif_partial_b_allfixed_se = asym_distribution(partial_Pif_partial_b_allfixed, successful_bw_deriv_allfixed)
partial_CS_partial_b_allfixed, partial_CS_partial_b_allfixed_se = asym_distribution(partial_CS_partial_b_allfixed, successful_bw_deriv_allfixed)
partial_Pif_partial_bf_allbw, partial_Pif_partial_bf_allbw_se = asym_distribution(partial_Pif_partial_bf_allbw, successful_bw_deriv_allbw)
partial_Piotherf_partial_bf_allbw, partial_Piotherf_partial_bf_allbw_se = asym_distribution(partial_Piotherf_partial_bf_allbw, successful_bw_deriv_allbw)
partial_diffPif_partial_bf_allbw, partial_diffPif_partial_bf_allbw_se = asym_distribution(partial_diffPif_partial_bf_allbw, successful_bw_deriv_allbw)
partial_Pif_partial_b_allbw, partial_Pif_partial_b_allbw_se = asym_distribution(partial_Pif_partial_b_allbw, successful_bw_deriv_allbw)
partial_CS_partial_b_allbw, partial_CS_partial_b_allbw_se = asym_distribution(partial_CS_partial_b_allbw, successful_bw_deriv_allbw)
c_u, c_u_se = asym_distribution(c_u, np.ones((c_u.shape[0], c_u.shape[1]), dtype=bool)) # all should be successful
c_R, c_R_se = asym_distribution(c_R, np.ones((c_R.shape[0], c_R.shape[1]), dtype=bool)) # all should be successful
p_stars_shortrun, p_stars_shortrun_se = asym_distribution(p_stars_shortrun, successful_shortrun)
R_stars_shortrun, R_stars_shortrun_se = asym_distribution(R_stars_shortrun, successful_shortrun)
num_stations_stars_shortrun, num_stations_stars_shortrun_se = asym_distribution(num_stations_stars_shortrun, successful_shortrun)
num_stations_per_firm_stars_shortrun, num_stations_per_firm_stars_shortrun_se = asym_distribution(num_stations_per_firm_stars_shortrun, successful_shortrun)
q_stars_shortrun, q_stars_shortrun_se = asym_distribution(q_stars_shortrun, successful_shortrun)
cs_by_type_shortrun, cs_by_type_shortrun_se = asym_distribution(cs_by_type_shortrun, successful_shortrun)
cs_shortrun, cs_shortrun_se = asym_distribution(cs_shortrun, successful_shortrun)
ps_shortrun, ps_shortrun_se = asym_distribution(ps_shortrun, successful_shortrun)
ts_shortrun, ts_shortrun_se = asym_distribution(ts_shortrun, successful_shortrun)
ccs_shortrun, ccs_shortrun_se = asym_distribution(ccs_shortrun, successful_shortrun)
ccs_per_bw_shortrun, ccs_per_bw_shortrun_se = asym_distribution(ccs_per_bw_shortrun, successful_shortrun)
avg_path_losses_shortrun, avg_path_losses_shortrun_se = asym_distribution(avg_path_losses_shortrun, successful_shortrun)
p_stars_free_allfixed, p_stars_free_allfixed_se = asym_distribution(p_stars_free_allfixed, successful_free_allfixed)
R_stars_free_allfixed, R_stars_free_allfixed_se = asym_distribution(R_stars_free_allfixed, successful_free_allfixed)
num_stations_stars_free_allfixed, num_stations_stars_free_allfixed_se = asym_distribution(num_stations_stars_free_allfixed, successful_free_allfixed)
num_stations_per_firm_stars_free_allfixed, num_stations_per_firm_stars_free_allfixed_se = asym_distribution(num_stations_per_firm_stars_free_allfixed, successful_free_allfixed)
q_stars_free_allfixed, q_stars_free_allfixed_se = asym_distribution(q_stars_free_allfixed, successful_free_allfixed)
cs_by_type_free_allfixed, cs_by_type_free_allfixed_se = asym_distribution(cs_by_type_free_allfixed, successful_free_allfixed)
cs_free_allfixed, cs_free_allfixed_se = asym_distribution(cs_free_allfixed, successful_free_allfixed)
ps_free_allfixed, ps_free_allfixed_se = asym_distribution(ps_free_allfixed, successful_free_allfixed)
ts_free_allfixed, ts_free_allfixed_se = asym_distribution(ts_free_allfixed, successful_free_allfixed)
ccs_free_allfixed, ccs_free_allfixed_se = asym_distribution(ccs_free_allfixed, successful_free_allfixed)
ccs_per_bw_free_allfixed, ccs_per_bw_free_allfixed_se = asym_distribution(ccs_per_bw_free_allfixed, successful_free_allfixed)
avg_path_losses_free_allfixed, avg_path_losses_free_allfixed_se = asym_distribution(avg_path_losses_free_allfixed, successful_free_allfixed)
p_stars_free_allbw, p_stars_free_allbw_se = asym_distribution(p_stars_free_allbw, successful_free_allbw)
R_stars_free_allbw, R_stars_free_allbw_se = asym_distribution(R_stars_free_allbw, successful_free_allbw)
num_stations_stars_free_allbw, num_stations_stars_free_allbw_se = asym_distribution(num_stations_stars_free_allbw, successful_free_allbw)
num_stations_per_firm_stars_free_allbw, num_stations_per_firm_stars_free_allbw_se = asym_distribution(num_stations_per_firm_stars_free_allbw, successful_free_allbw)
q_stars_free_allbw, q_stars_free_allbw_se = asym_distribution(q_stars_free_allbw, successful_free_allbw)
cs_by_type_free_allbw, cs_by_type_free_allbw_se = asym_distribution(cs_by_type_free_allbw, successful_free_allbw)
cs_free_allbw, cs_free_allbw_se = asym_distribution(cs_free_allbw, successful_free_allbw)
ps_free_allbw, ps_free_allbw_se = asym_distribution(ps_free_allbw, successful_free_allbw)
ts_free_allbw, ts_free_allbw_se = asym_distribution(ts_free_allbw, successful_free_allbw)
ccs_free_allbw, ccs_free_allbw_se = asym_distribution(ccs_free_allbw, successful_free_allbw)
ccs_per_bw_free_allbw, ccs_per_bw_free_allbw_se = asym_distribution(ccs_per_bw_free_allbw, successful_free_allbw)
avg_path_losses_free_allbw, avg_path_losses_free_allbw_se = asym_distribution(avg_path_losses_free_allbw, successful_free_allbw)
successful_dens_ = successful_dens[:,np.isin(num_firms_array_extend, num_firms_array)]
p_stars_dens, p_stars_dens_se = asym_distribution(p_stars_dens, successful_dens_, override_hBnan=True)
R_stars_dens, R_stars_dens_se = asym_distribution(R_stars_dens, successful_dens_, override_hBnan=True)
num_stations_stars_dens, num_stations_stars_dens_se = asym_distribution(num_stations_stars_dens, successful_dens_, override_hBnan=True)
num_stations_per_firm_stars_dens, num_stations_per_firm_stars_dens_se = asym_distribution(num_stations_per_firm_stars_dens, successful_dens_, override_hBnan=True)
q_stars_dens, q_stars_dens_se = asym_distribution(q_stars_dens, successful_dens_, override_hBnan=True)
cs_by_type_dens, cs_by_type_dens_se = asym_distribution(cs_by_type_dens, successful_dens)
cs_dens, cs_dens_se = asym_distribution(cs_dens, successful_dens)
ps_dens, ps_dens_se = asym_distribution(ps_dens, successful_dens)
ts_dens, ts_dens_se = asym_distribution(ts_dens, successful_dens)
ccs_dens, ccs_dens_se = asym_distribution(ccs_dens, successful_dens_, override_hBnan=True)
ccs_per_bw_dens, ccs_per_bw_dens_se = asym_distribution(ccs_per_bw_dens, successful_dens_, override_hBnan=True)
avg_path_losses_dens, avg_path_losses_dens_se = asym_distribution(avg_path_losses_dens, successful_dens_, override_hBnan=True)
avg_SINR_dens, avg_SINR_dens_se = asym_distribution(avg_SINR_dens, successful_dens_, override_hBnan=True)
successful_bw_ = successful_bw[:,np.isin(num_firms_array_extend, num_firms_array)]
p_stars_bw, p_stars_bw_se = asym_distribution(p_stars_bw, successful_bw_)
R_stars_bw, R_stars_bw_se = asym_distribution(R_stars_bw, successful_bw_)
num_stations_stars_bw, num_stations_stars_bw_se = asym_distribution(num_stations_stars_bw, successful_bw_)
num_stations_per_firm_stars_bw, num_stations_per_firm_stars_bw_se = asym_distribution(num_stations_per_firm_stars_bw, successful_bw_)
q_stars_bw, q_stars_bw_se = asym_distribution(q_stars_bw, successful_bw_)
cs_by_type_bw, cs_by_type_bw_se = asym_distribution(cs_by_type_bw, successful_bw)
cs_bw, cs_bw_se = asym_distribution(cs_bw, successful_bw)
ps_bw, ps_bw_se = asym_distribution(ps_bw, successful_bw)
ts_bw, ts_bw_se = asym_distribution(ts_bw, successful_bw)
ccs_bw, ccs_bw_se = asym_distribution(ccs_bw, successful_bw_)
ccs_per_bw_bw, ccs_per_bw_bw_se = asym_distribution(ccs_per_bw_bw, successful_bw_)
avg_path_losses_bw, avg_path_losses_bw_se = asym_distribution(avg_path_losses_bw, successful_bw_)
avg_SINR_bw, avg_SINR_bw_se = asym_distribution(avg_SINR_bw, successful_bw_)
successful_dens_1p_ = successful_dens_1p[:,np.isin(num_firms_array_extend, num_firms_array)]
p_stars_dens_1p, p_stars_dens_1p_se = asym_distribution(p_stars_dens_1p, successful_dens_1p_)
R_stars_dens_1p, R_stars_dens_1p_se = asym_distribution(R_stars_dens_1p, successful_dens_1p_)
num_stations_stars_dens_1p, num_stations_stars_dens_1p_se = asym_distribution(num_stations_stars_dens_1p, successful_dens_1p_)
num_stations_per_firm_stars_dens_1p, num_stations_per_firm_stars_dens_1p_se = asym_distribution(num_stations_per_firm_stars_dens_1p, successful_dens_1p_)
q_stars_dens_1p, q_stars_dens_1p_se = asym_distribution(q_stars_dens_1p, successful_dens_1p_)
cs_by_type_dens_1p, cs_by_type_dens_1p_se = asym_distribution(cs_by_type_dens_1p, successful_dens_1p)
cs_dens_1p, cs_dens_1p_se = asym_distribution(cs_dens_1p, successful_dens_1p)
ps_dens_1p, ps_dens_1p_se = asym_distribution(ps_dens_1p, successful_dens_1p)
ts_dens_1p, ts_dens_1p_se = asym_distribution(ts_dens_1p, successful_dens_1p)
ccs_dens_1p, ccs_dens_1p_se = asym_distribution(ccs_dens_1p, successful_dens_1p_)
ccs_per_bw_dens_1p, ccs_per_bw_dens_1p_se = asym_distribution(ccs_per_bw_dens_1p, successful_dens_1p_)
avg_path_losses_dens_1p, avg_path_losses_dens_1p_se = asym_distribution(avg_path_losses_dens_1p, successful_dens_1p_)
avg_SINR_dens_1p, avg_SINR_dens_1p_se = asym_distribution(avg_SINR_dens_1p, successful_dens_1p_)
p_stars_asymmetric_allbw, p_stars_asymmetric_allbw_se = asym_distribution(p_stars_asymmetric_allbw, successful_asymmetric_allbw)
R_stars_asymmetric_allbw, R_stars_asymmetric_allbw_se = asym_distribution(R_stars_asymmetric_allbw, successful_asymmetric_allbw)
num_stations_stars_asymmetric_allbw, num_stations_stars_asymmetric_allbw_se = asym_distribution(num_stations_stars_asymmetric_allbw, successful_asymmetric_allbw)
num_stations_per_firm_stars_asymmetric_allbw, num_stations_per_firm_stars_asymmetric_allbw_se = asym_distribution(num_stations_per_firm_stars_asymmetric_allbw, successful_asymmetric_allbw)
q_stars_asymmetric_allbw, q_stars_asymmetric_allbw_se = asym_distribution(q_stars_asymmetric_allbw, successful_asymmetric_allbw)
cs_by_type_asymmetric_allbw, cs_by_type_asymmetric_allbw_se = asym_distribution(cs_by_type_asymmetric_allbw, successful_asymmetric_allbw)
cs_asymmetric_allbw, cs_asymmetric_allbw_se = asym_distribution(cs_asymmetric_allbw, successful_asymmetric_allbw)
ps_asymmetric_allbw, ps_asymmetric_allbw_se = asym_distribution(ps_asymmetric_allbw, successful_asymmetric_allbw)
ts_asymmetric_allbw, ts_asymmetric_allbw_se = asym_distribution(ts_asymmetric_allbw, successful_asymmetric_allbw)
ccs_asymmetric_allbw, ccs_asymmetric_allbw_se = asym_distribution(ccs_asymmetric_allbw, successful_asymmetric_allbw)
ccs_per_bw_asymmetric_allbw, ccs_per_bw_asymmetric_allbw_se = asym_distribution(ccs_per_bw_asymmetric_allbw, successful_asymmetric_allbw)
avg_path_losses_asymmetric_allbw, avg_path_losses_asymmetric_allbw_se = asym_distribution(avg_path_losses_asymmetric_allbw, successful_asymmetric_allbw)
avg_SINR_asymmetric_allbw, avg_SINR_asymmetric_allbw_se = asym_distribution(avg_SINR_asymmetric_allbw, successful_asymmetric_allbw)
p_stars_shortrunall, p_stars_shortrunall_se = asym_distribution(p_stars_shortrunall, successful_shortrunall)
R_stars_shortrunall, R_stars_shortrunall_se = asym_distribution(R_stars_shortrunall, successful_shortrunall)
num_stations_stars_shortrunall, num_stations_stars_shortrunall_se = asym_distribution(num_stations_stars_shortrunall, successful_shortrunall)
num_stations_per_firm_stars_shortrunall, num_stations_per_firm_stars_shortrunall_se = asym_distribution(num_stations_per_firm_stars_shortrunall, successful_shortrunall)
q_stars_shortrunall, q_stars_shortrunall_se = asym_distribution(q_stars_shortrunall, successful_shortrunall)
cs_by_type_shortrunall, cs_by_type_shortrunall_se = asym_distribution(cs_by_type_shortrunall, successful_shortrunall)
cs_shortrunall, cs_shortrunall_se = asym_distribution(cs_shortrunall, successful_shortrunall)
ps_shortrunall, ps_shortrunall_se = asym_distribution(ps_shortrunall, successful_shortrunall)
ts_shortrunall, ts_shortrunall_se = asym_distribution(ts_shortrunall, successful_shortrunall)
ccs_shortrunall, ccs_shortrunall_se = asym_distribution(ccs_shortrunall, successful_shortrunall)
ccs_per_bw_shortrunall, ccs_per_bw_shortrunall_se = asym_distribution(ccs_per_bw_shortrunall, successful_shortrunall)
avg_path_losses_shortrunall, avg_path_losses_shortrunall_se = asym_distribution(avg_path_losses_shortrunall, successful_shortrunall)
p_stars_longrunall, p_stars_longrunall_se = asym_distribution(p_stars_longrunall, successful_longrunall)
R_stars_longrunall, R_stars_longrunall_se = asym_distribution(R_stars_longrunall, successful_longrunall)
num_stations_stars_longrunall, num_stations_stars_longrunall_se = asym_distribution(num_stations_stars_longrunall, successful_longrunall)
num_stations_per_firm_stars_longrunall, num_stations_per_firm_stars_longrunall_se = asym_distribution(num_stations_per_firm_stars_longrunall, successful_longrunall)
q_stars_longrunall, q_stars_longrunall_se = asym_distribution(q_stars_longrunall, successful_longrunall)
cs_by_type_longrunall, cs_by_type_longrunall_se = asym_distribution(cs_by_type_longrunall, successful_longrunall)
cs_longrunall, cs_longrunall_se = asym_distribution(cs_longrunall, successful_longrunall)
ps_longrunall, ps_longrunall_se = asym_distribution(ps_longrunall, successful_longrunall)
ts_longrunall, ts_longrunall_se = asym_distribution(ts_longrunall, successful_longrunall)
ccs_longrunall, ccs_longrunall_se = asym_distribution(ccs_longrunall, successful_longrunall)
ccs_per_bw_longrunall, ccs_per_bw_longrunall_se = asym_distribution(ccs_per_bw_longrunall, successful_longrunall)
avg_path_losses_longrunall, avg_path_losses_longrunall_se = asym_distribution(avg_path_losses_longrunall, successful_longrunall)
per_user_costs, per_user_costs_se = asym_distribution(per_user_costs, np.ones((per_user_costs.shape[0], per_user_costs.shape[1]), dtype=bool)) # all should be successful
    
# %%
# Save variables

# Point estimates
np.save(f"{paths.arrays_path}p_stars_{task_id}.npy", p_stars)
np.save(f"{paths.arrays_path}R_stars_{task_id}.npy", R_stars)
np.save(f"{paths.arrays_path}num_stations_stars_{task_id}.npy", num_stations_stars)
np.save(f"{paths.arrays_path}num_stations_per_firm_stars_{task_id}.npy", num_stations_per_firm_stars)
np.save(f"{paths.arrays_path}q_stars_{task_id}.npy", q_stars)
np.save(f"{paths.arrays_path}cs_by_type_{task_id}.npy", cs_by_type)
np.save(f"{paths.arrays_path}cs_{task_id}.npy", cs)
np.save(f"{paths.arrays_path}ps_{task_id}.npy", ps)
np.save(f"{paths.arrays_path}ts_{task_id}.npy", ts)
np.save(f"{paths.arrays_path}ccs_{task_id}.npy", ccs)
np.save(f"{paths.arrays_path}ccs_per_bw_{task_id}.npy", ccs_per_bw)
np.save(f"{paths.arrays_path}avg_path_losses_{task_id}.npy", avg_path_losses)
np.save(f"{paths.arrays_path}avg_SINR_{task_id}.npy", avg_SINR)
np.save(f"{paths.arrays_path}p_stars_allfixed_{task_id}.npy", p_stars_allfixed)
np.save(f"{paths.arrays_path}R_stars_allfixed_{task_id}.npy", R_stars_allfixed)
np.save(f"{paths.arrays_path}num_stations_stars_allfixed_{task_id}.npy", num_stations_stars_allfixed)
np.save(f"{paths.arrays_path}num_stations_per_firm_stars_allfixed_{task_id}.npy", num_stations_per_firm_stars_allfixed)
np.save(f"{paths.arrays_path}q_stars_allfixed_{task_id}.npy", q_stars_allfixed)
np.save(f"{paths.arrays_path}cs_by_type_allfixed_{task_id}.npy", cs_by_type_allfixed)
np.save(f"{paths.arrays_path}cs_allfixed_{task_id}.npy", cs_allfixed)
np.save(f"{paths.arrays_path}ps_allfixed_{task_id}.npy", ps_allfixed)
np.save(f"{paths.arrays_path}ts_allfixed_{task_id}.npy", ts_allfixed)
np.save(f"{paths.arrays_path}ccs_allfixed_{task_id}.npy", ccs_allfixed)
np.save(f"{paths.arrays_path}ccs_per_bw_allfixed_{task_id}.npy", ccs_per_bw_allfixed)
np.save(f"{paths.arrays_path}avg_path_losses_allfixed_{task_id}.npy", avg_path_losses_allfixed)
np.save(f"{paths.arrays_path}avg_SINR_allfixed_{task_id}.npy", avg_SINR_allfixed)
np.save(f"{paths.arrays_path}full_elasts_{task_id}.npy", full_elasts)
np.save(f"{paths.arrays_path}partial_elasts_{task_id}.npy", partial_elasts)
np.save(f"{paths.arrays_path}partial_Pif_partial_bf_allfixed_{task_id}.npy", partial_Pif_partial_bf_allfixed)
np.save(f"{paths.arrays_path}partial_Piotherf_partial_bf_allfixed_{task_id}.npy", partial_Piotherf_partial_bf_allfixed)
np.save(f"{paths.arrays_path}partial_diffPif_partial_bf_allfixed_{task_id}.npy", partial_diffPif_partial_bf_allfixed)
np.save(f"{paths.arrays_path}partial_Pif_partial_b_allfixed_{task_id}.npy", partial_Pif_partial_b_allfixed)
np.save(f"{paths.arrays_path}partial_CS_partial_b_allfixed_{task_id}.npy", partial_CS_partial_b_allfixed)
np.save(f"{paths.arrays_path}partial_Pif_partial_bf_allbw_{task_id}.npy", partial_Pif_partial_bf_allbw)
np.save(f"{paths.arrays_path}partial_Piotherf_partial_bf_allbw_{task_id}.npy", partial_Piotherf_partial_bf_allbw)
np.save(f"{paths.arrays_path}partial_diffPif_partial_bf_allbw_{task_id}.npy", partial_diffPif_partial_bf_allbw)
np.save(f"{paths.arrays_path}partial_Pif_partial_b_allbw_{task_id}.npy", partial_Pif_partial_b_allbw)
np.save(f"{paths.arrays_path}partial_CS_partial_b_allbw_{task_id}.npy", partial_CS_partial_b_allbw)
np.save(f"{paths.arrays_path}cost_c_u_{task_id}.npy", c_u)
np.save(f"{paths.arrays_path}cost_c_R_{task_id}.npy", c_R)
np.save(f"{paths.arrays_path}p_stars_shortrun_{task_id}.npy", p_stars_shortrun)
np.save(f"{paths.arrays_path}R_stars_shortrun_{task_id}.npy", R_stars_shortrun)
np.save(f"{paths.arrays_path}num_stations_stars_shortrun_{task_id}.npy", num_stations_stars_shortrun)
np.save(f"{paths.arrays_path}num_stations_per_firm_stars_shortrun_{task_id}.npy", num_stations_per_firm_stars_shortrun)
np.save(f"{paths.arrays_path}q_stars_shortrun_{task_id}.npy", q_stars_shortrun)
np.save(f"{paths.arrays_path}cs_by_type_shortrun_{task_id}.npy", cs_by_type_shortrun)
np.save(f"{paths.arrays_path}cs_shortrun_{task_id}.npy", cs_shortrun)
np.save(f"{paths.arrays_path}ps_shortrun_{task_id}.npy", ps_shortrun)
np.save(f"{paths.arrays_path}ts_shortrun_{task_id}.npy", ts_shortrun)
np.save(f"{paths.arrays_path}ccs_shortrun_{task_id}.npy", ccs_shortrun)
np.save(f"{paths.arrays_path}ccs_per_bw_shortrun_{task_id}.npy", ccs_per_bw_shortrun)
np.save(f"{paths.arrays_path}avg_path_losses_shortrun_{task_id}.npy", avg_path_losses_shortrun)
np.save(f"{paths.arrays_path}p_stars_free_allfixed_{task_id}.npy", p_stars_free_allfixed)
np.save(f"{paths.arrays_path}R_stars_free_allfixed_{task_id}.npy", R_stars_free_allfixed)
np.save(f"{paths.arrays_path}num_stations_stars_free_allfixed_{task_id}.npy", num_stations_stars_free_allfixed)
np.save(f"{paths.arrays_path}num_stations_per_firm_stars_free_allfixed_{task_id}.npy", num_stations_per_firm_stars_free_allfixed)
np.save(f"{paths.arrays_path}q_stars_free_allfixed_{task_id}.npy", q_stars_free_allfixed)
np.save(f"{paths.arrays_path}cs_by_type_free_allfixed_{task_id}.npy", cs_by_type_free_allfixed)
np.save(f"{paths.arrays_path}cs_free_allfixed_{task_id}.npy", cs_free_allfixed)
np.save(f"{paths.arrays_path}ps_free_allfixed_{task_id}.npy", ps_free_allfixed)
np.save(f"{paths.arrays_path}ts_free_allfixed_{task_id}.npy", ts_free_allfixed)
np.save(f"{paths.arrays_path}ccs_free_allfixed_{task_id}.npy", ccs_free_allfixed)
np.save(f"{paths.arrays_path}ccs_per_bw_free_allfixed_{task_id}.npy", ccs_per_bw_free_allfixed)
np.save(f"{paths.arrays_path}avg_path_losses_free_allfixed_{task_id}.npy", avg_path_losses_free_allfixed)
np.save(f"{paths.arrays_path}p_stars_free_allbw_{task_id}.npy", p_stars_free_allbw)
np.save(f"{paths.arrays_path}R_stars_free_allbw_{task_id}.npy", R_stars_free_allbw)
np.save(f"{paths.arrays_path}num_stations_stars_free_allbw_{task_id}.npy", num_stations_stars_free_allbw)
np.save(f"{paths.arrays_path}num_stations_per_firm_stars_free_allbw_{task_id}.npy", num_stations_per_firm_stars_free_allbw)
np.save(f"{paths.arrays_path}q_stars_free_allbw_{task_id}.npy", q_stars_free_allbw)
np.save(f"{paths.arrays_path}cs_by_type_free_allbw_{task_id}.npy", cs_by_type_free_allbw)
np.save(f"{paths.arrays_path}cs_free_allbw_{task_id}.npy", cs_free_allbw)
np.save(f"{paths.arrays_path}ps_free_allbw_{task_id}.npy", ps_free_allbw)
np.save(f"{paths.arrays_path}ts_free_allbw_{task_id}.npy", ts_free_allbw)
np.save(f"{paths.arrays_path}ccs_free_allbw_{task_id}.npy", ccs_free_allbw)
np.save(f"{paths.arrays_path}ccs_per_bw_free_allbw_{task_id}.npy", ccs_per_bw_free_allbw)
np.save(f"{paths.arrays_path}avg_path_losses_free_allbw_{task_id}.npy", avg_path_losses_free_allbw)
np.save(f"{paths.arrays_path}p_stars_dens_{task_id}.npy", p_stars_dens)
np.save(f"{paths.arrays_path}R_stars_dens_{task_id}.npy", R_stars_dens)
np.save(f"{paths.arrays_path}num_stations_stars_dens_{task_id}.npy", num_stations_stars_dens)
np.save(f"{paths.arrays_path}num_stations_per_firm_stars_dens_{task_id}.npy", num_stations_per_firm_stars_dens)
np.save(f"{paths.arrays_path}q_stars_dens_{task_id}.npy", q_stars_dens)
np.save(f"{paths.arrays_path}cs_by_type_dens_{task_id}.npy", cs_by_type_dens)
np.save(f"{paths.arrays_path}cs_dens_{task_id}.npy", cs_dens)
np.save(f"{paths.arrays_path}ps_dens_{task_id}.npy", ps_dens)
np.save(f"{paths.arrays_path}ts_dens_{task_id}.npy", ts_dens)
np.save(f"{paths.arrays_path}ccs_dens_{task_id}.npy", ccs_dens)
np.save(f"{paths.arrays_path}ccs_per_bw_dens_{task_id}.npy", ccs_per_bw_dens)
np.save(f"{paths.arrays_path}avg_path_losses_dens_{task_id}.npy", avg_path_losses_dens)
np.save(f"{paths.arrays_path}avg_SINR_dens_{task_id}.npy", avg_SINR_dens)
np.save(f"{paths.arrays_path}p_stars_bw_{task_id}.npy", p_stars_bw)
np.save(f"{paths.arrays_path}R_stars_bw_{task_id}.npy", R_stars_bw)
np.save(f"{paths.arrays_path}num_stations_stars_bw_{task_id}.npy", num_stations_stars_bw)
np.save(f"{paths.arrays_path}num_stations_per_firm_stars_bw_{task_id}.npy", num_stations_per_firm_stars_bw)
np.save(f"{paths.arrays_path}q_stars_bw_{task_id}.npy", q_stars_bw)
np.save(f"{paths.arrays_path}cs_by_type_bw_{task_id}.npy", cs_by_type_bw)
np.save(f"{paths.arrays_path}cs_bw_{task_id}.npy", cs_bw)
np.save(f"{paths.arrays_path}ps_bw_{task_id}.npy", ps_bw)
np.save(f"{paths.arrays_path}ts_bw_{task_id}.npy", ts_bw)
np.save(f"{paths.arrays_path}ccs_bw_{task_id}.npy", ccs_bw)
np.save(f"{paths.arrays_path}ccs_per_bw_bw_{task_id}.npy", ccs_per_bw_bw)
np.save(f"{paths.arrays_path}avg_path_losses_bw_{task_id}.npy", avg_path_losses_bw)
np.save(f"{paths.arrays_path}avg_SINR_bw_{task_id}.npy", avg_SINR_bw)
np.save(f"{paths.arrays_path}p_stars_dens_1p_{task_id}.npy", p_stars_dens_1p)
np.save(f"{paths.arrays_path}R_stars_dens_1p_{task_id}.npy", R_stars_dens_1p)
np.save(f"{paths.arrays_path}num_stations_stars_dens_1p_{task_id}.npy", num_stations_stars_dens_1p)
np.save(f"{paths.arrays_path}num_stations_per_firm_stars_dens_1p_{task_id}.npy", num_stations_per_firm_stars_dens_1p)
np.save(f"{paths.arrays_path}q_stars_dens_1p_{task_id}.npy", q_stars_dens_1p)
np.save(f"{paths.arrays_path}cs_by_type_dens_1p_{task_id}.npy", cs_by_type_dens_1p)
np.save(f"{paths.arrays_path}cs_dens_1p_{task_id}.npy", cs_dens_1p)
np.save(f"{paths.arrays_path}ps_dens_1p_{task_id}.npy", ps_dens_1p)
np.save(f"{paths.arrays_path}ts_dens_1p_{task_id}.npy", ts_dens_1p)
np.save(f"{paths.arrays_path}ccs_dens_1p_{task_id}.npy", ccs_dens_1p)
np.save(f"{paths.arrays_path}ccs_per_bw_dens_1p_{task_id}.npy", ccs_per_bw_dens_1p)
np.save(f"{paths.arrays_path}avg_path_losses_dens_1p_{task_id}.npy", avg_path_losses_dens_1p)
np.save(f"{paths.arrays_path}avg_SINR_dens_1p_{task_id}.npy", avg_SINR_dens_1p)
np.save(f"{paths.arrays_path}p_stars_asymmetric_allbw_{task_id}.npy", p_stars_asymmetric_allbw)
np.save(f"{paths.arrays_path}R_stars_asymmetric_allbw_{task_id}.npy", R_stars_asymmetric_allbw)
np.save(f"{paths.arrays_path}num_stations_stars_asymmetric_allbw_{task_id}.npy", num_stations_stars_asymmetric_allbw)
np.save(f"{paths.arrays_path}num_stations_per_firm_stars_asymmetric_allbw_{task_id}.npy", num_stations_per_firm_stars_asymmetric_allbw)
np.save(f"{paths.arrays_path}q_stars_asymmetric_allbw_{task_id}.npy", q_stars_asymmetric_allbw)
np.save(f"{paths.arrays_path}cs_by_type_asymmetric_allbw_{task_id}.npy", cs_by_type_asymmetric_allbw)
np.save(f"{paths.arrays_path}cs_asymmetric_allbw_{task_id}.npy", cs_asymmetric_allbw)
np.save(f"{paths.arrays_path}ps_asymmetric_allbw_{task_id}.npy", ps_asymmetric_allbw)
np.save(f"{paths.arrays_path}ts_asymmetric_allbw_{task_id}.npy", ts_asymmetric_allbw)
np.save(f"{paths.arrays_path}ccs_asymmetric_allbw_{task_id}.npy", ccs_asymmetric_allbw)
np.save(f"{paths.arrays_path}ccs_per_bw_asymmetric_allbw_{task_id}.npy", ccs_per_bw_asymmetric_allbw)
np.save(f"{paths.arrays_path}avg_path_losses_asymmetric_allbw_{task_id}.npy", avg_path_losses_asymmetric_allbw)
np.save(f"{paths.arrays_path}avg_SINR_asymmetric_allbw_{task_id}.npy", avg_SINR_asymmetric_allbw)
np.save(f"{paths.arrays_path}p_stars_shortrunall_{task_id}.npy", p_stars_shortrunall)
np.save(f"{paths.arrays_path}R_stars_shortrunall_{task_id}.npy", R_stars_shortrunall)
np.save(f"{paths.arrays_path}num_stations_stars_shortrunall_{task_id}.npy", num_stations_stars_shortrunall)
np.save(f"{paths.arrays_path}num_stations_per_firm_stars_shortrunall_{task_id}.npy", num_stations_per_firm_stars_shortrunall)
np.save(f"{paths.arrays_path}q_stars_shortrunall_{task_id}.npy", q_stars_shortrunall)
np.save(f"{paths.arrays_path}cs_by_type_shortrunall_{task_id}.npy", cs_by_type_shortrunall)
np.save(f"{paths.arrays_path}cs_shortrunall_{task_id}.npy", cs_shortrunall)
np.save(f"{paths.arrays_path}ps_shortrunall_{task_id}.npy", ps_shortrunall)
np.save(f"{paths.arrays_path}ts_shortrunall_{task_id}.npy", ts_shortrunall)
np.save(f"{paths.arrays_path}ccs_shortrunall_{task_id}.npy", ccs_shortrunall)
np.save(f"{paths.arrays_path}ccs_per_bw_shortrunall_{task_id}.npy", ccs_per_bw_shortrunall)
np.save(f"{paths.arrays_path}avg_path_losses_shortrunall_{task_id}.npy", avg_path_losses_shortrunall)
np.save(f"{paths.arrays_path}p_stars_longrunall_{task_id}.npy", p_stars_longrunall)
np.save(f"{paths.arrays_path}R_stars_longrunall_{task_id}.npy", R_stars_longrunall)
np.save(f"{paths.arrays_path}num_stations_stars_longrunall_{task_id}.npy", num_stations_stars_longrunall)
np.save(f"{paths.arrays_path}num_stations_per_firm_stars_longrunall_{task_id}.npy", num_stations_per_firm_stars_longrunall)
np.save(f"{paths.arrays_path}q_stars_longrunall_{task_id}.npy", q_stars_longrunall)
np.save(f"{paths.arrays_path}cs_by_type_longrunall_{task_id}.npy", cs_by_type_longrunall)
np.save(f"{paths.arrays_path}cs_longrunall_{task_id}.npy", cs_longrunall)
np.save(f"{paths.arrays_path}ps_longrunall_{task_id}.npy", ps_longrunall)
np.save(f"{paths.arrays_path}ts_longrunall_{task_id}.npy", ts_longrunall)
np.save(f"{paths.arrays_path}ccs_longrunall_{task_id}.npy", ccs_longrunall)
np.save(f"{paths.arrays_path}ccs_per_bw_longrunall_{task_id}.npy", ccs_per_bw_longrunall)
np.save(f"{paths.arrays_path}avg_path_losses_longrunall_{task_id}.npy", avg_path_losses_longrunall)
np.save(f"{paths.arrays_path}per_user_costs_{task_id}.npy", per_user_costs)

# Standard errors
if compute_std_errs:
    np.save(f"{paths.arrays_path}p_stars_se_{task_id}.npy", p_stars_se)
    np.save(f"{paths.arrays_path}R_stars_se_{task_id}.npy", R_stars_se)
    np.save(f"{paths.arrays_path}num_stations_stars_se_{task_id}.npy", num_stations_stars_se)
    np.save(f"{paths.arrays_path}num_stations_per_firm_stars_se_{task_id}.npy", num_stations_per_firm_stars_se)
    np.save(f"{paths.arrays_path}q_stars_se_{task_id}.npy", q_stars_se)
    np.save(f"{paths.arrays_path}cs_by_type_se_{task_id}.npy", cs_by_type_se)
    np.save(f"{paths.arrays_path}cs_se_{task_id}.npy", cs_se)
    np.save(f"{paths.arrays_path}ps_se_{task_id}.npy", ps_se)
    np.save(f"{paths.arrays_path}ts_se_{task_id}.npy", ts_se)
    np.save(f"{paths.arrays_path}ccs_se_{task_id}.npy", ccs_se)
    np.save(f"{paths.arrays_path}ccs_per_bw_se_{task_id}.npy", ccs_per_bw_se)
    np.save(f"{paths.arrays_path}avg_path_losses_se_{task_id}.npy", avg_path_losses_se)
    np.save(f"{paths.arrays_path}avg_SINR_se_{task_id}.npy", avg_SINR_se)
    np.save(f"{paths.arrays_path}full_elasts_se_{task_id}.npy", full_elasts_se)
    np.save(f"{paths.arrays_path}partial_elasts_se_{task_id}.npy", partial_elasts_se)
    np.save(f"{paths.arrays_path}p_stars_allfixed_se_{task_id}.npy", p_stars_allfixed_se)
    np.save(f"{paths.arrays_path}R_stars_allfixed_se_{task_id}.npy", R_stars_allfixed_se)
    np.save(f"{paths.arrays_path}num_stations_stars_allfixed_se_{task_id}.npy", num_stations_stars_allfixed_se)
    np.save(f"{paths.arrays_path}num_stations_per_firm_stars_allfixed_se_{task_id}.npy", num_stations_per_firm_stars_allfixed_se)
    np.save(f"{paths.arrays_path}q_stars_allfixed_se_{task_id}.npy", q_stars_allfixed_se)
    np.save(f"{paths.arrays_path}cs_by_type_allfixed_se_{task_id}.npy", cs_by_type_allfixed_se)
    np.save(f"{paths.arrays_path}cs_allfixed_se_{task_id}.npy", cs_allfixed_se)
    np.save(f"{paths.arrays_path}ps_allfixed_se_{task_id}.npy", ps_allfixed_se)
    np.save(f"{paths.arrays_path}ts_allfixed_se_{task_id}.npy", ts_allfixed_se)
    np.save(f"{paths.arrays_path}ccs_allfixed_se_{task_id}.npy", ccs_allfixed_se)
    np.save(f"{paths.arrays_path}ccs_per_bw_allfixed_se_{task_id}.npy", ccs_per_bw_allfixed_se)
    np.save(f"{paths.arrays_path}avg_path_losses_allfixed_se_{task_id}.npy", avg_path_losses_allfixed_se)
    np.save(f"{paths.arrays_path}avg_SINR_allfixed_se_{task_id}.npy", avg_SINR_allfixed_se)
    np.save(f"{paths.arrays_path}partial_Pif_partial_bf_allfixed_se_{task_id}.npy", partial_Pif_partial_bf_allfixed_se)
    np.save(f"{paths.arrays_path}partial_Piotherf_partial_bf_allfixed_se_{task_id}.npy", partial_Piotherf_partial_bf_allfixed_se)
    np.save(f"{paths.arrays_path}partial_diffPif_partial_bf_allfixed_se_{task_id}.npy", partial_diffPif_partial_bf_allfixed_se)
    np.save(f"{paths.arrays_path}partial_Pif_partial_b_allfixed_se_{task_id}.npy", partial_Pif_partial_b_allfixed_se)
    np.save(f"{paths.arrays_path}partial_CS_partial_b_allfixed_se_{task_id}.npy", partial_CS_partial_b_allfixed_se)
    np.save(f"{paths.arrays_path}partial_Pif_partial_bf_allbw_se_{task_id}.npy", partial_Pif_partial_bf_allbw_se)
    np.save(f"{paths.arrays_path}partial_Piotherf_partial_bf_allbw_se_{task_id}.npy", partial_Piotherf_partial_bf_allbw_se)
    np.save(f"{paths.arrays_path}partial_diffPif_partial_bf_allbw_se_{task_id}.npy", partial_diffPif_partial_bf_allbw_se)
    np.save(f"{paths.arrays_path}partial_Pif_partial_b_allbw_se_{task_id}.npy", partial_Pif_partial_b_allbw_se)
    np.save(f"{paths.arrays_path}partial_CS_partial_b_allbw_se_{task_id}.npy", partial_CS_partial_b_allbw_se)
    np.save(f"{paths.arrays_path}cost_c_u_se_{task_id}.npy", c_u_se)
    np.save(f"{paths.arrays_path}cost_c_R_se_{task_id}.npy", c_R_se)
    np.save(f"{paths.arrays_path}p_stars_shortrun_se_{task_id}.npy", p_stars_shortrun_se)
    np.save(f"{paths.arrays_path}R_stars_shortrun_se_{task_id}.npy", R_stars_shortrun_se)
    np.save(f"{paths.arrays_path}num_stations_stars_shortrun_se_{task_id}.npy", num_stations_stars_shortrun_se)
    np.save(f"{paths.arrays_path}num_stations_per_firm_stars_shortrun_se_{task_id}.npy", num_stations_per_firm_stars_shortrun_se)
    np.save(f"{paths.arrays_path}q_stars_shortrun_se_{task_id}.npy", q_stars_shortrun_se)
    np.save(f"{paths.arrays_path}cs_by_type_shortrun_se_{task_id}.npy", cs_by_type_shortrun_se)
    np.save(f"{paths.arrays_path}cs_shortrun_se_{task_id}.npy", cs_shortrun_se)
    np.save(f"{paths.arrays_path}ps_shortrun_se_{task_id}.npy", ps_shortrun_se)
    np.save(f"{paths.arrays_path}ts_shortrun_se_{task_id}.npy", ts_shortrun_se)
    np.save(f"{paths.arrays_path}ccs_shortrun_se_{task_id}.npy", ccs_shortrun_se)
    np.save(f"{paths.arrays_path}ccs_per_bw_shortrun_se_{task_id}.npy", ccs_per_bw_shortrun_se)
    np.save(f"{paths.arrays_path}avg_path_losses_shortrun_se_{task_id}.npy", avg_path_losses_shortrun_se)
    np.save(f"{paths.arrays_path}p_stars_free_allfixed_se_{task_id}.npy", p_stars_free_allfixed_se)
    np.save(f"{paths.arrays_path}R_stars_free_allfixed_se_{task_id}.npy", R_stars_free_allfixed_se)
    np.save(f"{paths.arrays_path}num_stations_stars_free_allfixed_se_{task_id}.npy", num_stations_stars_free_allfixed_se)
    np.save(f"{paths.arrays_path}num_stations_per_firm_stars_free_allfixed_se_{task_id}.npy", num_stations_per_firm_stars_free_allfixed_se)
    np.save(f"{paths.arrays_path}q_stars_free_allfixed_se_{task_id}.npy", q_stars_free_allfixed_se)
    np.save(f"{paths.arrays_path}cs_by_type_free_allfixed_se_{task_id}.npy", cs_by_type_free_allfixed_se)
    np.save(f"{paths.arrays_path}cs_free_se_allfixed_{task_id}.npy", cs_free_allfixed_se)
    np.save(f"{paths.arrays_path}ps_free_se_allfixed_{task_id}.npy", ps_free_allfixed_se)
    np.save(f"{paths.arrays_path}ts_free_se_allfixed_{task_id}.npy", ts_free_allfixed_se)
    np.save(f"{paths.arrays_path}ccs_free_allfixed_se_{task_id}.npy", ccs_free_allfixed_se)
    np.save(f"{paths.arrays_path}ccs_per_bw_free_allfixed_se_{task_id}.npy", ccs_per_bw_free_allfixed_se)
    np.save(f"{paths.arrays_path}avg_path_losses_free_allfixed_se_{task_id}.npy", avg_path_losses_free_allfixed_se)
    np.save(f"{paths.arrays_path}p_stars_free_allbw_se_{task_id}.npy", p_stars_free_allbw_se)
    np.save(f"{paths.arrays_path}R_stars_free_allbw_se_{task_id}.npy", R_stars_free_allbw_se)
    np.save(f"{paths.arrays_path}num_stations_stars_free_allbw_se_{task_id}.npy", num_stations_stars_free_allbw_se)
    np.save(f"{paths.arrays_path}num_stations_per_firm_stars_free_allbw_se_{task_id}.npy", num_stations_per_firm_stars_free_allbw_se)
    np.save(f"{paths.arrays_path}q_stars_free_allbw_se_{task_id}.npy", q_stars_free_allbw_se)
    np.save(f"{paths.arrays_path}cs_by_type_free_allbw_se_{task_id}.npy", cs_by_type_free_allbw_se)
    np.save(f"{paths.arrays_path}cs_free_se_allbw_{task_id}.npy", cs_free_allbw_se)
    np.save(f"{paths.arrays_path}ps_free_se_allbw_{task_id}.npy", ps_free_allbw_se)
    np.save(f"{paths.arrays_path}ts_free_se_allbw_{task_id}.npy", ts_free_allbw_se)
    np.save(f"{paths.arrays_path}ccs_free_allbw_se_{task_id}.npy", ccs_free_allbw_se)
    np.save(f"{paths.arrays_path}ccs_per_bw_free_allbw_se_{task_id}.npy", ccs_per_bw_free_allbw_se)
    np.save(f"{paths.arrays_path}avg_path_losses_free_allbw_se_{task_id}.npy", avg_path_losses_free_allbw_se)
    
    np.save(f"{paths.arrays_path}p_stars_dens_se_{task_id}.npy", p_stars_dens_se)
    np.save(f"{paths.arrays_path}R_stars_dens_se_{task_id}.npy", R_stars_dens_se)
    np.save(f"{paths.arrays_path}num_stations_stars_dens_se_{task_id}.npy", num_stations_stars_dens_se)
    np.save(f"{paths.arrays_path}num_stations_per_firm_stars_dens_se_{task_id}.npy", num_stations_per_firm_stars_dens_se)
    np.save(f"{paths.arrays_path}q_stars_dens_se_{task_id}.npy", q_stars_dens_se)
    np.save(f"{paths.arrays_path}cs_by_type_dens_se_{task_id}.npy", cs_by_type_dens_se)
    np.save(f"{paths.arrays_path}cs_dens_se_{task_id}.npy", cs_dens_se)
    np.save(f"{paths.arrays_path}ps_dens_se_{task_id}.npy", ps_dens_se)
    np.save(f"{paths.arrays_path}ts_dens_se_{task_id}.npy", ts_dens_se)
    np.save(f"{paths.arrays_path}ccs_dens_se_{task_id}.npy", ccs_dens_se)
    np.save(f"{paths.arrays_path}ccs_per_bw_dens_se_{task_id}.npy", ccs_per_bw_dens_se)
    np.save(f"{paths.arrays_path}avg_path_losses_dens_se_{task_id}.npy", avg_path_losses_dens_se)
    np.save(f"{paths.arrays_path}avg_SINR_dens_se_{task_id}.npy", avg_SINR_dens_se)
    np.save(f"{paths.arrays_path}p_stars_bw_se_{task_id}.npy", p_stars_bw_se)
    np.save(f"{paths.arrays_path}R_stars_bw_se_{task_id}.npy", R_stars_bw_se)
    np.save(f"{paths.arrays_path}num_stations_stars_bw_se_{task_id}.npy", num_stations_stars_bw_se)
    np.save(f"{paths.arrays_path}num_stations_per_firm_stars_bw_se_{task_id}.npy", num_stations_per_firm_stars_bw_se)
    np.save(f"{paths.arrays_path}q_stars_bw_se_{task_id}.npy", q_stars_bw_se)
    np.save(f"{paths.arrays_path}cs_by_type_bw_se_{task_id}.npy", cs_by_type_bw_se)
    np.save(f"{paths.arrays_path}cs_bw_se_{task_id}.npy", cs_bw_se)
    np.save(f"{paths.arrays_path}ps_bw_se_{task_id}.npy", ps_bw_se)
    np.save(f"{paths.arrays_path}ts_bw_se_{task_id}.npy", ts_bw_se)
    np.save(f"{paths.arrays_path}ccs_bw_se_{task_id}.npy", ccs_bw_se)
    np.save(f"{paths.arrays_path}ccs_per_bw_bw_se_{task_id}.npy", ccs_per_bw_bw_se)
    np.save(f"{paths.arrays_path}avg_path_losses_bw_se_{task_id}.npy", avg_path_losses_bw_se)
    np.save(f"{paths.arrays_path}avg_SINR_bw_se_{task_id}.npy", avg_SINR_bw_se)
    np.save(f"{paths.arrays_path}p_stars_dens_1p_se_{task_id}.npy", p_stars_dens_1p_se)
    np.save(f"{paths.arrays_path}R_stars_dens_1p_se_{task_id}.npy", R_stars_dens_1p_se)
    np.save(f"{paths.arrays_path}num_stations_stars_dens_1p_se_{task_id}.npy", num_stations_stars_dens_1p_se)
    np.save(f"{paths.arrays_path}num_stations_per_firm_stars_dens_1p_se_{task_id}.npy", num_stations_per_firm_stars_dens_1p_se)
    np.save(f"{paths.arrays_path}q_stars_dens_1p_se_{task_id}.npy", q_stars_dens_1p_se)
    np.save(f"{paths.arrays_path}cs_by_type_dens_1p_se_{task_id}.npy", cs_by_type_dens_1p_se)
    np.save(f"{paths.arrays_path}cs_dens_1p_se_{task_id}.npy", cs_dens_1p_se)
    np.save(f"{paths.arrays_path}ps_dens_1p_se_{task_id}.npy", ps_dens_1p_se)
    np.save(f"{paths.arrays_path}ts_dens_1p_se_{task_id}.npy", ts_dens_1p_se)
    np.save(f"{paths.arrays_path}ccs_dens_1p_se_{task_id}.npy", ccs_dens_1p_se)
    np.save(f"{paths.arrays_path}ccs_per_bw_dens_1p_se_{task_id}.npy", ccs_per_bw_dens_1p_se)
    np.save(f"{paths.arrays_path}avg_path_losses_dens_1p_se_{task_id}.npy", avg_path_losses_dens_1p_se)
    np.save(f"{paths.arrays_path}avg_SINR_dens_1p_se_{task_id}.npy", avg_SINR_dens_1p_se)
    np.save(f"{paths.arrays_path}p_stars_asymmetric_allbw_se_{task_id}.npy", p_stars_asymmetric_allbw_se)
    np.save(f"{paths.arrays_path}R_stars_asymmetric_allbw_se_{task_id}.npy", R_stars_asymmetric_allbw_se)
    np.save(f"{paths.arrays_path}num_stations_stars_asymmetric_allbw_se_{task_id}.npy", num_stations_stars_asymmetric_allbw_se)
    np.save(f"{paths.arrays_path}num_stations_per_firm_stars_asymmetric_allbw_se_{task_id}.npy", num_stations_per_firm_stars_asymmetric_allbw_se)
    np.save(f"{paths.arrays_path}q_stars_asymmetric_allbw_se_{task_id}.npy", q_stars_asymmetric_allbw_se)
    np.save(f"{paths.arrays_path}cs_by_type_asymmetric_allbw_se_{task_id}.npy", cs_by_type_asymmetric_allbw_se)
    np.save(f"{paths.arrays_path}cs_asymmetric_allbw_se_{task_id}.npy", cs_asymmetric_allbw_se)
    np.save(f"{paths.arrays_path}ps_asymmetric_allbw_se_{task_id}.npy", ps_asymmetric_allbw_se)
    np.save(f"{paths.arrays_path}ts_asymmetric_allbw_se_{task_id}.npy", ts_asymmetric_allbw_se)
    np.save(f"{paths.arrays_path}ccs_asymmetric_allbw_se_{task_id}.npy", ccs_asymmetric_allbw_se)
    np.save(f"{paths.arrays_path}ccs_per_bw_asymmetric_allbw_se_{task_id}.npy", ccs_per_bw_asymmetric_allbw_se)
    np.save(f"{paths.arrays_path}avg_path_losses_asymmetric_allbw_se_{task_id}.npy", avg_path_losses_asymmetric_allbw_se)
    np.save(f"{paths.arrays_path}avg_SINR_asymmetric_allbw_se_{task_id}.npy", avg_SINR_asymmetric_allbw_se)
    np.save(f"{paths.arrays_path}p_stars_shortrunall_se_{task_id}.npy", p_stars_shortrunall_se)
    np.save(f"{paths.arrays_path}R_stars_shortrunall_se_{task_id}.npy", R_stars_shortrunall_se)
    np.save(f"{paths.arrays_path}num_stations_stars_shortrunall_se_{task_id}.npy", num_stations_stars_shortrunall_se)
    np.save(f"{paths.arrays_path}num_stations_per_firm_stars_shortrunall_se_{task_id}.npy", num_stations_per_firm_stars_shortrunall_se)
    np.save(f"{paths.arrays_path}q_stars_shortrunall_se_{task_id}.npy", q_stars_shortrunall_se)
    np.save(f"{paths.arrays_path}cs_by_type_shortrunall_se_{task_id}.npy", cs_by_type_shortrunall_se)
    np.save(f"{paths.arrays_path}cs_shortrunall_se_{task_id}.npy", cs_shortrunall_se)
    np.save(f"{paths.arrays_path}ps_shortrunall_se_{task_id}.npy", ps_shortrunall_se)
    np.save(f"{paths.arrays_path}ts_shortrunall_se_{task_id}.npy", ts_shortrunall_se)
    np.save(f"{paths.arrays_path}ccs_shortrunall_se_{task_id}.npy", ccs_shortrunall_se)
    np.save(f"{paths.arrays_path}ccs_per_bw_shortrunall_se_{task_id}.npy", ccs_per_bw_shortrunall_se)
    np.save(f"{paths.arrays_path}avg_path_losses_shortrunall_se_{task_id}.npy", avg_path_losses_shortrunall_se)
    np.save(f"{paths.arrays_path}p_stars_longrunall_se_{task_id}.npy", p_stars_longrunall_se)
    np.save(f"{paths.arrays_path}R_stars_longrunall_se_{task_id}.npy", R_stars_longrunall_se)
    np.save(f"{paths.arrays_path}num_stations_stars_longrunall_se_{task_id}.npy", num_stations_stars_longrunall_se)
    np.save(f"{paths.arrays_path}num_stations_per_firm_stars_longrunall_se_{task_id}.npy", num_stations_per_firm_stars_longrunall_se)
    np.save(f"{paths.arrays_path}q_stars_longrunall_se_{task_id}.npy", q_stars_longrunall_se)
    np.save(f"{paths.arrays_path}cs_by_type_longrunall_se_{task_id}.npy", cs_by_type_longrunall_se)
    np.save(f"{paths.arrays_path}cs_longrunall_se_{task_id}.npy", cs_longrunall_se)
    np.save(f"{paths.arrays_path}ps_longrunall_se_{task_id}.npy", ps_longrunall_se)
    np.save(f"{paths.arrays_path}ts_longrunall_se_{task_id}.npy", ts_longrunall_se)
    np.save(f"{paths.arrays_path}ccs_longrunall_se_{task_id}.npy", ccs_longrunall_se)
    np.save(f"{paths.arrays_path}ccs_per_bw_longrunall_se_{task_id}.npy", ccs_per_bw_longrunall_se)
    np.save(f"{paths.arrays_path}avg_path_losses_longrunall_se_{task_id}.npy", avg_path_losses_longrunall_se)
    np.save(f"{paths.arrays_path}per_user_costs_se_{task_id}.npy", per_user_costs_se)
